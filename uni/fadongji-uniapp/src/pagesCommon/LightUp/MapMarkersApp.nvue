<template>
	<view class="container" :style="{height: sys.windowHeight}" v-if="showMap">
		<map id="map" ref="map" :scale="options.scale" :style="{height: sys.windowHeight, width: '750rpx'}"
			:markers="options.marker" :latitude="options.latitude" :longitude="options.longitude" :show-location="false"
			@markertap="clickMarker" @tap="hideDetail">
			<view class="full-w bg-w" :style="{height: sys.safeAreaInsets.top + 'px'}"></view>

			<view class="nav-title row flex-justify-between align-c bg-w">
				<view class="icon-left" @click.stop="backFn">
					<image class="icon-48" src='/static/icons/back.png'></image>
				</view>
				<text class="nav-title-word f-s-36 f-c-85">点亮修理厂</text>
				<view class="func-bar row align-c">
					<text class="f-s-28 f-c-65" @click="goList">列表</text>
					<!-- <image class="icon-more icon-24" src="/static/common/map/more.png"></image> -->
				</view>
			</view>

			<!-- 标点对应状态说明 -->
			<view class="fixed check" :style="{top: (sys.safeAreaInsets.top + 53) + 'px'}">
				<view class="row m-b-16"
					@click="goTo('/pagesCommon/LightUp/ChooseArea')">
					<text class="f-s-28 f-c-85 f-w-500">当前城市：{{ requestParams.districtName }}</text>
					<image class="arrow" src='/static/icons/arrow_block.png'></image>
				</view>
				<text class="f-s-28 f-c-85 f-w-500">
					{{ areaData[0].registerStatusStr }}：{{ areaData[0].count }}
				</text>
				<view class="check-item">
					<view class="row align-c">
						<view class="circle circle-blue" />
						<text class="f-s-28 f-c-85"> {{ areaData[2].registerStatusStr }}：{{ areaData[2].count }} </text>
					</view>
					<view class="row align-c">
						<view class="circle circle-yellow" />
						<text class="f-s-28 f-c-85"> {{ areaData[3].registerStatusStr }}：{{ areaData[3].count }} </text>
					</view>
					<view class="row align-c">
						<view class="circle circle-gray" />
						<text class="f-s-28 f-c-85"> {{ areaData[1].registerStatusStr }}：{{ areaData[1].count }} </text>
					</view>
				</view>
			</view>

			<!-- 底部悬浮区域 -->
			<view class="fixed full-w bottom-box row">
				<!-- 地区内修理厂数据 -->
				<u-transition :show="show" mode="slide-up" @afterLeave="showBtn = true">
					<view class="transition row">
						<view class="detail">
							<view class="detail-close row flex-justify-between" @click="hideDetail">
								<view></view>
								<image class="icon-28" src="/static/common/map/close.png"></image>
							</view>

							<view class="detail-title row">
								<image class="icon-face" :src=" '/static/icons/me.png'"></image>
								<text class="detail-title__name f-s-32 f-c-85">{{ curData.companyName }}</text>
								<image v-if="+curData.registerStatus === 0" class="icon-sign"
									src="/static/common/map/light_0.png"></image>
								<image v-else class="icon-sign" src="/static/common/map/light_1.png"></image>
							</view>

							<block v-if="curData.distance">
								<block v-if="+curData.distance < 1000">
									<text class="detail-address f-s-24 f-c-45">
										{{ curData.distance + 'm丨' + curData.province+curData.city+curData.area+curData.address }}
									</text>
								</block>
								<block v-else>
									<text class="detail-address f-s-24 f-c-45">
										{{ (+curData.distance / 1000).toFixed(2) + 'km丨' + curData.province+curData.city+curData.area+curData.address }}
									</text>
								</block>
							</block>
							<block v-else>
								<text class="detail-address f-s-24 f-c-45">
									{{ curData.province+curData.city+curData.area + curData.address }}
								</text>
							</block>


							<view class="detail-contact row flex-justify-between align-c">
								<view>
									<text class="f-s-24 f-c-45">{{ curData.contractName }}</text>
									<view v-if="curData.registerStatus && curData.phoneNumber" class="row align-c"
										@click="callPhone">
										<text class="f-s-24 f-c-45 phone">{{ curData.phoneNumber }}</text>
										<image class="icon-56" src="/static/common/map/mobile.png"></image>
									</view>
								</view>
								<text
									v-if="userinfo.platformCode === 'agent' && +curData.registerStatus === 1 && curData.isBuy"
									class="detail-contact__btn"
									@click="goTo(`/pagesAgent/GoodsList/GoodsList?companyId=${curData.companyId}&salesArea=${curData.areaCode}`)">
									代客下单
								</text>
								<text v-else class="detail-contact__btn" @click="openGps">去导航</text>
							</view>

							<view v-if="+curData.registerStatus === 1" class="sign-bar row align-c">
								<block v-for="(item, index) in signList">
									<text
									    v-if="curData.labelType && curData.labelType.length"
									    :key="index"
									    class="sign"
										:class="{ 'sign-act' : curData.labelType.indexOf(item.val) != -1 }"
										@click="changeSign(index)"
                                    >
                                        {{ item.name }}
                                    </text>
                                    <text
                                        v-else
                                        :key="index"
                                        class="sign"
                                        @click="changeSign(index)"
                                    >
                                        {{ item.name }}
                                    </text>
								</block>
							</view>
						</view>
					</view>
				</u-transition>
			</view>
		</map>
	</view>
</template>
<script>
    import permission from '@/common/permission'
	export default {
		name: 'Demo',
		data() {
			return {
				// 展示详情抽屉
				show: false,
				// 展示底部按钮
				showBtn: true,
				requestParams: {
					checkStatus: null, // 认证状态
					companyId: null, // 地图标点id
					licenseId: '',
					inviterId: '',
					cityCode: '',
					cityName: '',
					districtName: '',
					districtCode: '',
				},
				// 区域内修理厂数据
				areaData: [
					[],
					[],
					[]
				],
				// 当前选中修理厂数据
				curData: {
					face_icon: '/static/common/map/map_icon_2.png', // 头像
					store_name: '江陵动力修理厂', // 修理厂名称
					status: 2, // 认证状态
					distance: '439m', // 距离
					address: '河南省-郑州市-金水区-龙子湖街道中央广场河南省郑州市金水区龙子湖街道中央广场', // 地址
					user_name: '张木子', // 联系人名称
					phone: '132 **** 1789', // 脱敏电话
					real_phone: '13353833215', // 真实电话（调用拨打电话功能）
					sign: 1, //标记 1、目标客户；2、汽车美容；3、补胎
				},
				tabList: [], // 状态筛选按钮
				curTab: 0, // 当前选中状态
				// 标签按钮
				signList: [{
						name: '目标客户',
						val: 1,
						selected: false,
					},
					{
						name: '汽车美容',
						val: 2,
						selected: false,
					},
					{
						name: '补胎',
						val: 3,
						selected: false,
					},
				],
				curSign: 0, // 当前选中标签
				// 用户信息
				userinfo: {},
				sys: {},
				// 地图参数
				options: {
					// 地图属性参数
					latitude: 39.908692, //纬度
					longitude: 116.397477, //经度
					scale: 13, //缩放级别
					// 标记点属性
					marker: [],
				},
				showMap: false,
			}
		},
		onError(e) {
			console.log(e)
		},
		async onLoad(options) {
			const res = uni.getSystemInfoSync()
			this.sys = res
			console.log('safeArea', res)
			const {
				licenseId,
				inviterId
			} = options
			this.requestParams.licenseId = licenseId
			this.requestParams.inviterId = inviterId
			this.userinfo = (await this.$store.getters['user/getUserInfo']()) || {}
			uni.$off('addressFn')
			uni.$on('addressFn', (res) => {
				console.log(res)
				this.requestParams.districtName = res.name
				this.requestParams.districtCode = res.code
				this.codeGetMarker(res.code)
				this.getData()
			})
		},
		onShow() {
			if (this.requestParams.districtCode) {
				return
			}
			uni.getLocation({
				type: 'wgs84',
				success: async (res) => {
					uni.showLoading({
						title: '页面加载中'
					})
					const {
						longitude,
						latitude
					} = res
					this.requestParams.latitude = latitude
					this.requestParams.longitude = longitude
					this.options.latitude = latitude
					this.options.longitude = longitude
					const rec = await getApp().$VoHttp.apiAreaProvinceSub({
						latitude: latitude,
						longitude: longitude,
					})
					console.log(rec)
					this.requestParams = Object.assign(this.requestParams, rec.data)
					await this.getData()
					await this.getList()
				},
				complete: (res) => {
					console.log(res)
				},
				fail: (ret) => {
					uni.showModal({
						title: '提示',
						content: '需要您开启定位授权，获取您的位置信息！',
						cancelText: '暂不开启',
						confirmText: '去开启',
						success: ({
							confirm,
							cancel
						}) => {
							if (confirm) {
								// android平台
								if (uni.getSystemInfoSync().platform == 'android') {
									var context = plus.android.importClass(
										"android.content.Context");
									var locationManager = plus.android.importClass(
										"android.location.LocationManager");
									var main = plus.android.runtimeMainActivity()
									var mainSvr = main.getSystemService(context
										.LOCATION_SERVICE)
									if (!mainSvr.isProviderEnabled(locationManager
											.GPS_PROVIDER)) {
										var Intent = plus.android.importClass(
											'android.content.Intent')
										var Settings = plus.android.importClass(
											'android.provider.Settings')
										var intent = new Intent(Settings
											.ACTION_LOCATION_SOURCE_SETTINGS)
										main.startActivity(intent) // 打开系统设置GPS服务页面
									} else {
										var Intent = plus.android.importClass(
											'android.content.Intent')
										var Settings = plus.android.importClass(
											'android.provider.Settings')
										var Uri = plus.android.importClass('android.net.Uri')
										var mainActivity = plus.android.runtimeMainActivity()
										var intent = new Intent()
										intent.setAction(Settings
											.ACTION_APPLICATION_DETAILS_SETTINGS)
										var uri = Uri.fromParts('package', mainActivity
											.getPackageName(), null)
										intent.setData(uri)
										mainActivity.startActivity(intent)
									}
								}
								// ios平台
								if (uni.getSystemInfoSync().platform == 'ios') {
									var UIApplication = plus.ios.import("UIApplication");
									var application2 = UIApplication.sharedApplication();
									var NSURL2 = plus.ios.import("NSURL");
									var setting2 = NSURL2.URLWithString(
										"App-Prefs:root=Privacy&path=LOCATION");
									application2.openURL(setting2);
									plus.ios.deleteObject(setting2);
									plus.ios.deleteObject(NSURL2);
									plus.ios.deleteObject(application2);
								}
							}
							// 用户取消前往开启定位服务
							if (cancel) {
								// do sth...
								uni.navigateBack()
							}
						},
					})
				},
			})
		},
		methods: {
			codeGetMarker(areaCode) {
				uni.showLoading()
				getApp().$VoHttp
					.apiImportGarageMapByAreaCode({
						areaCode
					})
					.then((res) => {
						console.log(res)
						const {
							data,
							latitude,
							longitude
						} = res.data
						this.updateMarker(data)
						this.options.latitude = latitude
						this.options.longitude = longitude
					})
			 	.catch((e) => {
						uni.$u.toast(e.message || '网络连接出错')
					})
					.finally(() => {
						uni.hideLoading()
			  })
			},
			// 返回列表
			goList() {
				let url = '/pagesEngineer/Spread/SpreadList?redirectTo=1'
				if (this.userinfo.platformCode === 'agent') {
					url = '/pagesAgent/TokerDistrict/MyGarage'
				}
				getApp().$linkToEasy(url)
			},
			// 加密电话
			encryptPhone(phone) {
				return phone ? getApp().$vocenApi.VoUtils.encryptPhone(phone) : ''
			},
			// 获取数据统计
			async getData() {
				const {
					latitude,
					longitude,
					licenseId,
					inviterId
				} = this.requestParams
				try {
					const data = await getApp().$VoHttp.apiImportGarageMapTab({
						latitude,
						longitude,
						licenseId,
						inviterId,
						areaCode: this.requestParams.districtCode || null,
					}, {
						noLoading: true
					})
					if (!data || !data.data) {
						uni.navigateBack()
						return
					}
					console.log(data)
					if (+data.code === 20001) {
						this.areaData = data.data
					} else {
						uni.navigateBack()
						uni.$u.toast(data.message)
					}
				} catch (e) {
					console.log(e);
					uni.$u.toast(e.message || '网络请求失败')
					uni.navigateBack()
				}
			},
			// 获取tabs
			async getTabs() {
				const {
					latitude,
					longitude,
					licenseId,
					inviterId
				} = this.requestParams
				try {
					const data = await getApp().$VoHttp.apiCompanyInfoManagerGarageMapTab({
						latitude,
						longitude,
						licenseId,
						inviterId,
					})
					if (!data || !data.data) {
						uni.navigateBack()
						return
					}
					if (+data.code === 20001) {
						this.tabList = data.data
					} else {
						uni.$u.toast(data.message)
					}
				} catch (e) {
					console.log(e);
					uni.$u.toast(e.message || '网络请求失败')
					uni.navigateBack()
				}
			},
			// 获取修理厂详情
			async getDetail(id) {
				try {
					const {
						latitude,
						longitude
					} = this.requestParams
					const data = await getApp().$VoHttp.apiImportGarageDetail({
						id,
						latitude,
						longitude
					}, {
						noLoading: true
					})
					console.log(data)
					if (!data || !data.data) {
						uni.navigateBack()
						return
					}
					if (+data.code === 20001) {
						this.curData = data.data
					} else {
						uni.$u.toast(data.message)
					}
				} catch (e) {
					console.log(e)
					uni.$u.toast(e.message || '网络请求失败')
				}
			},
			// 获取修理厂marker列表
			async getList() {
				this.showMap = false
				const {
					latitude,
					longitude,
					licenseId,
					inviterId,
					checkStatus
				} = this.requestParams
				try {
					const data = await getApp().$VoHttp.apiImportGarageMap({
						latitude,
						longitude,
						licenseId,
						inviterId,
						checkStatus,
					}, {
						noLoading: true
					})
					uni.hideLoading()
					if (!data || !data.data) {
						uni.navigateBack()
						return
					}
					if (+data.code === 20001) {
						let arr = []
						if (data.data.length > 0) {
							this.updateMarker(data.data)
						} else {
							this.options.marker = []
						}
						this.showMap = true
					} else {
						uni.$u.toast(data.message)
					}
				} catch (e) {
					console.log(e);
					uni.hideLoading()
					uni.$u.toast(e.message || '网络请求失败')
				}
			},
			updateMarker(data) {
				let arr = []
				const {
					checkStatus
				} = this.requestParams
				this.options.marker = []
				this.showMap = false
				let objs = {
				  id: '0',
				  longitude: this.requestParams.longitude,
				  latitude: this.requestParams.latitude,
				  iconPath: '/static/common/map/location.png', //显示的图标
				  rotate: 0, // 旋转度数
				  width: 36, //宽
				  height: 75, //高
				  // title:'我在这里',//标注点名
				  // label: {
				  //   //为标记点旁边增加标签   //因背景颜色H5不支持
				  //   color: 'red', //文本颜色
				  // },
				  alpha: 1, //透明度
				  callout: {
				    //自定义标记点上方的气泡窗口 点击有效
				    content: '我的位置', //文本
				    color: '#262626', //文字颜色
				    fontSize: 14, //文本大小
				    borderRadius: 30, //边框圆角
				    borderWidth: '10',
				    bgColor: '#ffffff', //背景颜色
				    display: 'ALWAYS', //常显
				  },
				}
				console.log(this.sys.platform)
				if (this.sys.platform === 'ios') {
					objs.callout.borderRadius = 15
				}
				setTimeout(() => {
					data.forEach((item, index) => {
						const {
							registerStatus,
							companyId,
							latitude,
							longitude
						} = item
						let iconPath = '/static/common/map/lightUp_1.png'
						if (+registerStatus === 1) {
							iconPath = '/static/common/map/lightUp_2.png'
						} else if (+registerStatus === 0) {
							iconPath = '/static/common/map/lightUp_0.png'
						}
						const obj = {
							id: item.id,
							companyId,
							checkStatus,
							latitude,
							longitude,
							iconPath,
							rotate: 0, // 旋转度数
							width: 36, //宽
							height: 36, //高
							alpha: 1, //透明度
						}
						// this.options.marker.concat(obj)
						arr.push(obj)
						if(index === data.length - 1) {
							arr.push(objs)
						}
					})

					this.options.marker = [...arr]
					this.showMap = true
					this.$forceUpdate()
					// this.$nextTick(() => {
					// 	this._mapContext = uni.createMapContext("map", this);
					// 	this._mapContext.addMarkers({
					// 		markers: [objs],
					// 		clear: false,
					// 		complete(res) {
					// 			console.log(res)
					// 		}
					// 	})
					// 	console.log(this._mapContext)
					// })
				}, 100)
			},
			// 返回上一级
			backFn() {
				uni.navigateBack({
					fail(err) {},
				})
			},
			/**
			 * 点击地图标点事件
			 * @param e 当前点击参数
			 */
			async clickMarker(e) {
				console.log(e)
				uni.showLoading({
					title: '加载中'
				})
				const cur = e.detail.markerId
				let companyId = ''
				this.options.marker.forEach(item => {
					if (item.id == cur) {
						if (item.id !== '0') {
						    item.width = item.height = 50
						    companyId = item.id
						}
					} else {
					    if (item.id !== '0') {
						    item.width = item.height = 36
						}
					}
				})
				if (!companyId) {
				    uni.hideLoading()
				    return
				}
				await this.getDetail(companyId)
				const list = this.options.marker
				this.options.marker = []
				setTimeout(() => {
					this.options.marker = list
					this.show = true
					this.showBtn = false
					uni.hideLoading()
				}, 100)
			},
			/**
			 * 隐藏详情后
			 * @param e
			 */
			hideDetail(e) {
				if (!this.show) return
				uni.showLoading({
					title: '加载中'
				})
				this.show = false
				this.options.marker.forEach(item => {
				    if (item.id !== '0') {
						item.width = item.height = 36
					}
				})
				const list = this.options.marker
				this.options.marker = []
				setTimeout(() => {
					console.log('zxc')
					this.options.marker = list
				}, 100)
				setTimeout(() => {
					uni.hideLoading()
				}, 1000)
			},
			/**
			 * 切换标签
			 */
			async changeSign(index) {
				let arr = []
				let val = this.signList[index].val + ''
				if (this.curData.labelType) {
					arr = this.curData.labelType.split(',')
					if (arr.indexOf(val) != -1) {
						let i = arr.indexOf(val)
						arr.splice(i, 1)
					} else {
						arr.push(val)
					}
				} else {
					arr.push(val)
				}
				let param = {
					companyId: this.curData.companyId,
					licenseId: this.requestParams.licenseId,
					operator: this.requestParams.inviterId,
					labelType: arr.length ? arr.join(',') : ''
				}
				console.log(param)
				try {
					const data = await getApp().$VoHttp.apiCompanyInfoManagerGarageLabelSave(param)
					if (!data || !data.data) return
					this.curData.labelType = arr.length ? arr.join(',') : ''
				} catch (e) {
					console.log(e)
				}
			},
			/**
			 * 底部跳转按钮
			 */
			goTo(url) {
			    getApp().$storage.set('garageArea', this.curData.areaCode || '')
				uni.navigateTo({
					url
				})
			},
			openGps() {
				uni.openLocation({
					name: this.curData.companyName,
					latitude: Number(this.curData.latitude),
					longitude: Number(this.curData.longitude),
					success: function() {
						console.log('success');
					}
				});
			},
			/**
			 * 切换地图标点类型
			 */
			changeType(item) {
				this.requestParams.type = item.checkStatus
				this.getData()
			},
			/**
			 * 拨打电话
			 */
			async callPhone() {
				const phone = this.curData.phoneNumber
				let a = true
				if (uni.getSystemInfoSync().platform == 'ios') {
					//ios不需要获取电话权限
					// a = await permission.judgeIosPermission('contact')
				} else {
					a = await permission.requestAndroidPermission('android.permission.CALL_PHONE')
					// 永久拒绝
					if (a === -1) {
						a = false
					}
				}
				console.log('quanxian=====', a)
				if (!a) {
					uni.showModal({
						title: '提示',
						content: '请去设置打开电话权限',
						success: function(res) {
							if (res.confirm) {
								permission.gotoAppPermissionSetting()
							} else if (res.cancel) {
								console.log('用户点击取消')
							}
						},
					})
					return
				}
				uni.makePhoneCall({
					phoneNumber: String(phone),
				})
			}
		},
	}
</script>
<style scoped>
	/* 固定定位 */
	.fixed {
		position: fixed;
	}

	.icon-left {
		height: 88rpx;
		padding-left: 36rpx;
		align-items: center;
		justify-content: center;
	}

	.icon-24 {
		width: 24rpx;
		height: 24rpx;
	}

	.icon-28 {
		width: 28rpx;
		height: 28rpx;
	}

	.icon-32 {
		width: 32rpx;
		height: 32rpx;
	}

	.icon-48 {
		width: 48rpx;
		height: 48rpx;
	}

	.icon-56 {
		width: 56rpx;
		height: 56rpx;
	}


	.icon-sign {
		width: 104rpx;
		height: 36rpx;
	}

	.full-w {
		width: 750rpx;
	}

	.bg-w {
		background-color: #ffffff;
	}

	.flex-justify-between {
		justify-content: space-between;
	}

	.align-c {
		align-items: center;
	}

	.shrink {
		flex-shrink: 0;
	}

	.row {
		flex-direction: row;
	}

	.f-s-24 {
		font-size: 24rpx;
	}

	.f-s-28 {
		font-size: 28rpx;
	}

	.f-s-32 {
		font-size: 32rpx;
	}

	.f-s-36 {
		font-size: 36rpx;
	}

	.f-c-25 {
		color: rgba(0, 0, 0, 0.25)
	}

	.f-c-45 {
		color: rgba(0, 0, 0, 0.45)
	}

	.f-c-65 {
		color: rgba(0, 0, 0, 0.65)
	}

	.f-c-85 {
		color: rgba(0, 0, 0, 0.85)
	}

	.f-w-500 {
		font-weight: 500;
	}

	.f-w-400 {
		font-weight: 400;
	}

	.m-b-16 {
		margin-bottom: 16rpx;
	}

	.mark {
		position: fixed;
		left: 0;
		top: 0;
		width: 750rpx;
	}

	.nav-title,
	.func-bar {
		height: 88rpx;
	}

	.nav-title {
		position: relative;
		padding: 0 36rpx;
		padding-left: 0;
	}

	.nav-title-word {
		position: absolute;
		left: 286rpx;
		font-weight: 500;
		font-size: 36rpx;
	}

	.icon-more {
		margin-left: 36rpx;
	}

	.map {
		position: absolute;
		top: 0;
		left: 0;
		width: 750rpx;
		height: 900rpx;
		z-index: 10;
	}

	/* 标点对应状态说明 */
	.check {
		display: flex;
		width: 686rpx;
		top: 106rpx;
		right: 32rpx;
		padding: 16rpx;
		padding-top: 22rpx;
		padding-right: 24rpx;
		background-color: rgba(255, 255, 255, 0.85);
		border-radius: 8rpx;
		box-shadow: 0 4rpx 16rpx rgba(34, 40, 75, 0.15);
		backdrop-filter: blur(8rpx);
	}

	.arrow {
		width: 36rpx;
		height: 36rpx;
		/* padding-bottom: 4rpx; */
		margin-left: 10rpx;
		/* align-self: flex-end; */
	}

	.check-item {
		font-size: 28rpx;
		display: flex;
		justify-content: space-between;
		flex-direction: row;
		align-items: center;
		width: initial;
		box-sizing: border-box;
		font-weight: 400;
		font-size: 24rpx;
		text-align: center;
		color: rgba(0, 0, 0, 0.85);
		margin-top: 16rpx;
	}

	.circle {
		width: 20rpx;
		height: 20rpx;
		border-radius: 50%;
		margin-right: 8rpx;
	}

	.circle-blue {
		background: #0d66ff;
	}

	.circle-yellow {
		background: #ff9b05;
	}

	.circle-gray {
		background: #8c8c8c;
	}

	/* 底部信息区 */
	.bottom-box {
		left: 0;
		bottom: 0;
		flex-wrap: wrap;
	}

	/* 地区内修理厂数据 */
	.census {
		font-weight: 400;
		font-size: 28rpx;
		margin-bottom: 32rpx;
	}

	.census-content {
		padding: 24rpx 16rpx;
		margin-right: 32rpx;
		background-color: rgba(255, 255, 255, 0.85);
		border-radius: 8rpx;
		box-shadow: 0 4rpx 16rpx rgba(34, 40, 75, 0.15);
		/* backdrop-filter: blur(8rpx); */
	}

	/* 底部按钮 */
	.bottom-btn-bar {
		padding: 20rpx 32rpx;
		background-color: #ffffff;
	}

	.btn-bar__item {
		width: 325rpx;
		height: 92rpx;
		line-height: 92rpx;
		color: #FF5319;
		font-size: 32rpx;
		border: 1px solid #FF7A4D;
		border-radius: 48rpx;
		text-align: center;
	}

	.btn-bar__item-act {
		color: #fff;
		background-color: #FF5319;
		border-color: #FF5319;
	}

	/* 底部详情弹窗 */
	.detail {
		width: 750rpx;
		padding: 20rpx 32rpx;
		background-color: #ffffff;
	}

	.detail-close {
		/* margin-right: 14rpx; */
		margin-bottom: 30rpx;
	}

	.icon-face {
		width: 48rpx;
		height: 48rpx;
		border-radius: 8rpx;
	}

	.detail-title {
		display: flex;
		align-items: center;
		font-weight: 500;
		font-size: 32rpx;
	}

	.detail-title__name {
		margin-left: 16rpx;
		margin-right: 8rpx;
		max-width: 424rpx;
		lines: 1;
		text-overflow: ellipsis;
	}

	.detail-address {
		width: 686rpx;
		margin-top: 24rpx;
		margin-bottom: 10rpx;
		lines: 2;
		/* flex-wrap: wrap; */
		/* word-break: break-all; */
		text-overflow: ellipsis;
	}

	.detail-contact {
		padding-bottom: 36rpx;
		border-bottom: 2rpx solid #F7F7F8;
	}

	.phone {
		margin-right: 28rpx;
		height: 36rpx;
		line-height: 36rpx;
	}

	.detail-contact__btn {
		width: 160rpx;
		height: 56rpx;
		line-height: 56rpx;
		font-size: 24rpx;
		text-align: center;
		color: #FF5319;
		border: 1px solid #FF7A4D;
		border-radius: 30px;
		align-self: flex-end;
	}

	.sign-bar {
		padding: 24rpx 0rpx;
		overflow: scroll;
	}

	.sign {
		padding: 0 16rpx;
		font-size: 24rpx;
		color: rgba(0, 0, 0, 0.45);
		background-color: #F7F7F8;
		border-radius: 24rpx;
		margin-right: 16rpx;
	}

	.sign-act {
		background-color: #E50012;
		color: #fff;
	}
</style>
